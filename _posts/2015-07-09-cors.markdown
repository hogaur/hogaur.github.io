---
layout: post
title:  "Understanding CORS"
date:   2015-07-09
categories:
---
<h4 align="center"><em>
And resolving CORS error when running rails server on localhost
</em></h4>
<p align="justify">
Cross-origin resource sharing is a mechanism by which resources such as
images, fonts, JavaScript can be shared with the domains other than the
resources are present on. In short, it enables web browsers to support
secure cross site data transfers. A web page may have embed images,
stylesheets, scripts and videos from any domain. However embedded
XMLHttpRequests are restricted to the same domain as the parent web
page. This default behaviour of permitting scripts contained in a first
web page to access data in a second web page, only if both web pages
have the same domain is called the Same Origin Policy.<br> <br>
According to same-origin-policy, a web browser permits scripts contained
in a web page to access data from another web page or should I say load
resources from another webpage if both the pages have same origin. Here,
an Origin is defined as a combination of URI scheme, hostname and port
number. So, two requests originated from http://192.168.10.10:3000 and
http://192.168.10.10:3000/settings have same origin while requests
originated from http://192.168.10.10:3000, https://192.168.10.10:3000,
http://192.168.10.11:3000, http://192.168.10.10:4000 have different
origins. <br><br>
CORS is a mechanism by which a browser and a server can interact to
determine if cross-origin requests are to be allowed or not. It allows
for more freedom and functionality than purely same-origin requests, but
is more secure than simply allowing all cross-origin requests.
<br><br>
A browser when hit with a particular URL goes to respective IP address,
downloads all the assets, runs scripts and renders the html. A lot of
HTTP requests are made for resources from a different domain than the
domain of the resource making the request. For instance, often you need
an HTML page on www.example_domain_1.com to make a request for an image
on www.example_domain_2.com using the img element. Such requests are
called Cross-site HTTP requests. Cross-site requests are made to access
CSS stylesheets, images, scripts etc from domains across the web.
Cross-site requests initiated from scripts should be put to proper
restrictions for security reasons. e.g. an HTTP request made using the
XMLHttpRequest object are subjected to same-origin-policy. Cross-domain
AJAX requests are subjected to same-origin-policy by default because of
their ability to perform advanced HTTP requests, POST, PUT, DELETE etc.
<br><br>
Same-origin-policy restricts us to make cross-site requests but many a
time we need to make such requests. So capability of scripts to make
cross-site requests (e.g. using XMLHttpRequest objects) is desired. Here
comes the role of Cross Origin Resource Sharing mechanism. The
Cross-Origin Resource Sharing standard works by adding new HTTP headers
that allow servers to describe the set of origins that are permitted to
read that information using a web browser. The CORS standard describes
new HTTP headers which provide browsers and servers a way to request
remote URLs only when they have permission.<br><br>
When a CORS-compatible browser attempts to make a cross-origin request,
the browser send the request with an HTTP header- ‘Origin’. The value of
this header is the domain where the request came from. Now, when a page
from http://www.alice.com wants to access a user’s data in
http://www.bar.com (yes, cross-origin it is!), Origin header will have
value ‘http://www.alice.com'. Now the server at bob.com may respond with
another header called Access-Control-Allow-Origin (ACAO) with its value
set to allowed origins such as http://www.alice.com or an error page
would be served.
<br><br>
Note that the ACAO header is being set by the server we need resource
from i.e. www.bob.com, not the original web application server from
which the request was sent i.e. www.alice.com.
<br><br>
So Cross Domain Resource Sharing is to be allowed if you want to access
resources from other domains. But what if you are hosting your website
on 127.0.0.0 and all assets needed for the web application are available
there itself and your browser gives “CORS error: CORS request failed”.
<br><br>
There are many ways by which you can allow Cross Origin Resource Sharing
and people have talked about them extensively e.g. configuring ACAO
header tags. But you are running your application on localhost and all
the resources needed are available there only. Where is the catch here?
First understand that it is NOT a Cross Origin issue as your application
does not demand any data from any place other than your own machine.
Then why CORS error by the browser, eh?<br><br>
Go, check your routes end to end. Lets suppose, you are working on a
RAILS application. How a route is resolved in a RAILS application? Lets
look at the process step by step-
Your rails server is running on 127.0.0.0:3000 on your machine and you
hit 127.0.0.0:3000/ in address bar of your browser  in your machine. It
goes to your server running at given pair of ip address-port number and
asks to render root route of your application which in turn resolves it
to a controller function using your config/routes.rb file. <br><br>
Now, suppose you click on “settings" button on your browser which is
currently displaying your application home page which would take you to
“/settings” path of your application. But nothing happens. You open the
JavaScript console in your browser and find an error “CORS error: CORS
request failed” instead. At this very step, you should go check all the
possible places where you could have defined paths for your application
in your front end. What are those places? Where you submit your forms or
handle a click event to go to a different path. You might be using AJAX
to send XMLHttpRequest objects and get data from the server.<br><br>
If you are using AJAX to handle your requests to server, go to
/app/assets/javascripts folder and check all the request handling you
have written, specially check the paths you have sent requests to. Even
a single extra “/“ in your path causes the Origin header of your request
to change. And before you will understand, it makes your request a
cross-origin one (remember Origin as a set of protocol, ip address and
port number). Your browser does not find your domain in permitted
origins and it gives you a Cross Origin Request Failed error. So, go
change that syntax error and your application should work just fine
running on your localhost. 
<br><br>
So, now you know what CORS is? And what to do when your browser throws a
CORS error next time, specially when you are running rails server on
your localhost, right? :)

</p>
