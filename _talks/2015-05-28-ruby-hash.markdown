---
layout: talk
title:  "Ruby Hashes"
date:   2015-05-28 19:11:11
categories:
section: 'Code'
description: 'A collection of unique keys and their value'
---

<p>
Hashes also called Associative arrays, are similar to arrays in the way
that arrays use integers as their keys (array indexes). A hash allows
you to use any objects as keys.

Declaring a blank hash is as simple as writing -
{% highlight ruby %}
hash_map={}
{% endhighlight %}
A Hash can also be created using the method Hash#new-
{% highlight ruby %}
hash_map=Hash.new
{% endhighlight %}
A hash key-value pair can have any object as its key. e.g. price and
volume below, use objects of class String and Symbol respectively and
both are valid hashes-
{% highlight ruby %}
price = {"pepsi"=>10, "cola"=>10, "amul"=>20}
volume = {:pepsi=>330, :cola=>330, :amul=>200}
{% endhighlight %}
In fact, a hash can have different object types as its keys. e.g.
a_hash below is a valid hash too-
{% highlight ruby %}
a_hash = {:a_symbol => "symbol it is", "a_string" => "string it is"}
{% endhighlight %}
In case you want to access a key that has not been added to a hash, a
<em>default value</em> is returned. If default is not set, <em>nil</em>
is returned. You can set the default value by passing it as an argument
to <em>new</em> or calling the <em>Hash#default</em> method - 
{% highlight ruby %}
price = Hash.new(0)
price.default = 0 
{% endhighlight %}
Fetching values from a Hash and modifying it- you can fetch values from
a Hash by putting the key name in square bracket after the Hash name.
And just in case you want to modify them, writing the new value in
front of the above is enough.
{% highlight ruby %}
price[:pepsi] #=>fetches value corresponding to key :pepsi i.e. 10
price[:pepsi] = 20 #=> assigns the value 20 to the key :pepsi
{% endhighlight %}
If you want to list down all the keys in a Hash, 
<em>price.keys</em> will get you an array of all the keys in hash
price.
</p>
<strong>Hash#each, map</strong>
<p>
You can iterate over a Hash using <em>Hash#each</em> method. It is similar to
<em>Array#each</em> method but passes two values to the block parameters, the
key and the value of each element.
{% highlight ruby %}
price.each do |key, value|
puts "Price of #{key} is #{value}"
end
{% endhighlight %}
<em>Hash#map</em> iterates over a Hash and returns an array with result of
running block for each element of Hash.
{% highlight ruby %}
price = {"pepsi" => 10, "cola" => 10, "amul" => 20}
price.map {|key, value| [key.to_sym , value.to_s ] }
#=> [[:pepsi,"10"], [:cola, "10"], [:amul, "20"]]
{% endhighlight %}
</p>
